{"version":3,"sources":["images/Logo.png","images/GerhardLogo.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","logo","alt","style","fontWeight","marginBottom","fontSize","color","href","textAlign","id","backgroundImage","image","height","width","backgroundPosition","backgroundSize","backgroundRepeat","marginRight","lineHeight","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,+LCoD5BC,MA/Cf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yBAAKH,UAAU,eACb,wBAAIA,UAAU,QAAQI,MAAO,CAAEC,WAAY,IAAKC,aAAc,GAAIC,SAAU,KAA5E,WAGA,wBAAIP,UAAU,YAAYI,MAAO,CAAEC,WAAY,IAAKG,MAAO,UAAWD,SAAU,KAAhF,eACA,yBAAKP,UAAU,eACb,uBAAGS,KAAK,SAAST,UAAU,aAA3B,SACA,uBAAGS,KAAK,YAAYT,UAAU,aAA9B,YACA,uBAAGS,KAAK,WAAWT,UAAU,YAAYI,MAAO,CAAEM,UAAW,UAA7D,cAIN,yBAAKC,GAAG,QAAQX,UAAU,0BACxB,yBAAKI,MAAO,CACVQ,gBAAiB,OAASC,IAAQ,IAClCC,OAAQ,IACRC,MAAO,IACPC,mBAAoB,SACpBC,eAAgB,QAChBC,iBAAkB,YAClBC,YAAa,OAEf,yBAAKnB,UAAU,eACb,wBAAII,MAAO,CAAEI,MAAO,UAAWD,SAAU,KAAzC,SAGA,uBAAGH,MAAO,CAACgB,WAAY,IAAKC,SAAU,IAAKb,MAAO,UAAlD,wHAMJ,yBAAKG,GAAG,WAAWX,UAAU,gBAC3B,wBAAIA,UAAU,cAAcI,MAAO,CAAEI,MAAO,UAAWD,SAAU,KAAjE,aAEF,yBAAKI,GAAG,UAAUX,UAAU,iBAC1B,wBAAIA,UAAU,cAAcI,MAAO,CAAEI,MAAO,UAAWD,SAAU,KAAjE,cClCYe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.43612b7e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.b664cbb2.png\";","module.exports = __webpack_public_path__ + \"static/media/GerhardLogo.bbee6178.jpg\";","import React from 'react';\nimport logo from './images/Logo.png';\nimport image from './images/GerhardLogo.jpg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div className=\"Name-Header\">\n          <h1 className=\"names\" style={{ fontWeight: 200, marginBottom: 20, fontSize: 65 }}>\n            GERHARD\n        </h1>\n          <h1 className=\"lastNames\" style={{ fontWeight: 300, color: \"#c60f0f\", fontSize: 65 }}>VAN NIEKERK</h1>\n          <div className=\"Menu-Header\">\n            <a href=\"#about\" className=\"Menu-Text\">ABOUT</a>\n            <a href=\"#projects\" className=\"Menu-Text\">PROJECTS</a>\n            <a href=\"#contact\" className=\"Menu-Text\" style={{ textAlign: \"right\" }}>CONTACT</a>\n          </div>\n        </div>\n      </header>\n      <div id=\"about\" className=\"Light-Section hor-flex\">\n        <div style={{\n          backgroundImage: \"url(\" + image + \")\",\n          height: 400,\n          width: 325,\n          backgroundPosition: \"center\",\n          backgroundSize: \"cover\",\n          backgroundRepeat: \"no-repeat\",\n          marginRight: 100\n        }}></div>\n        <div className=\"Name-Header\">\n          <h1 style={{ color: \"#c60f0f\", fontSize: 45 }}>\n            ABOUT\n        </h1>\n          <p style={{lineHeight: 1.5, maxWidth: 600, color: \"white\"}}>\n            I started getting an interest in computers at a young age playing games with my brothers\n            wararararar akkedis kobus\n          </p>\n        </div>\n      </div>\n      <div id=\"projects\" className=\"Dark-Section\">\n        <h1 className=\"Menu-Header\" style={{ color: \"#FFFFFF\", fontSize: 45 }}>PROJECTS</h1>\n      </div>\n      <div id=\"contact\" className=\"Light-Section\">\n        <h1 className=\"Menu-Header\" style={{ color: \"#c60f0f\", fontSize: 45 }}>CONTACT</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}